# 注意规则在满足自己需求情况下，尽量做到精简，不要过度复杂，以免影响性能。
# 机场订阅
proxy-providers:
  xmrth:
    url: "机场订阅"
    type: http
    interval: 86400
    filter: "(?i)中继"
    exclude-filter: "(?i)剩余"
    health-check:
      enable: true
      url: https://www.gstatic.com/generate_204
      interval: 300
    proxy: 直连

# 节点信息
proxies:
  - {name: 直连, type: direct}
  - {name: 拒绝, type: reject}

# 全局配置
port: 7890
socks-port: 7891
redir-port: 7892
mixed-port: 7893
tproxy-port: 7894
allow-lan: true
bind-address: "*"
ipv6: true
unified-delay: true
tcp-concurrent: true
log-level: warning
find-process-mode: 'off'
# interface-name: en0
global-client-fingerprint: chrome
keep-alive-idle: 600
keep-alive-interval: 15
disable-keep-alive: false
profile:
  store-selected: true
  store-fake-ip: true

# 控制面板
external-controller: 0.0.0.0:9090
secret: ""
external-ui: "/etc/nikki/run/ui"
external-ui-name: zashboard
external-ui-url: "https://github.com/Zephyruso/zashboard/archive/refs/heads/gh-pages.zip"


# 入站
tun:
  enable: true
  # system/gvisor/mixed
  stack: mixed
  # dns-hijack: ["any:53", "tcp://any:53"]
  auto-route: true
  auto-redirect: true
  auto-detect-interface: true

# DNS模块
dns:
  enable: true
  listen: 0.0.0.0:1053
  ipv6: true
  respect-rules: true
  enhanced-mode: fake-ip
  fake-ip-range: 198.18.0.1/16
  fake-ip-filter-mode: blacklist
  fake-ip-filter:
    - "rule-set:private_domain,cn_domain"
    - "+.msftconnecttest.com"
    - "+.msftncsi.com"
    - "time.*.com"
  default-nameserver:
    - 223.5.5.5
  proxy-server-nameserver:
    - https://223.5.5.5/dns-query
  # namesever尽量用运营商提供的DNS
  nameserver:
    - 61.128.128.68
    - 223.5.5.5

# 出站策略
# 注意锚点必须放在引用的上方，可以集中把锚点全部放yaml的顶部。
pr: &pr {type: select, proxies: [🚀 节点选择, ♻️ 自动选择, 🚀 手动切换, 🇭🇰 香港自动, 🇨🇳 台湾自动, 🇯🇵 日本自动, 🇰🇷 韩国自动, 🇺🇲 美国自动, 🇸🇬 新加坡自动,
    🇭🇰 香港故转, 🇨🇳 台湾故转, 🇯🇵 日本故转, 🇰🇷 韩国故转, 🇺🇲 美国故转, 🇸🇬 新加坡故转, 直连]}
# 锚点模板
region-anchor:
  manual: &manual {type: select, include-all: true}
  auto: &auto {type: url-test, include-all: true, tolerance: 20, interval: 300}

# 地区过滤器
filters:
  hk: &hk_filter "(?i)(?=.*(港|hk|hong))^((?!(台|日|韩|新|深|美)).)*$"
  tw: &tw_filter "(?i)(?=.*(台|新北|彰化|tw|taiwan))^((?!(港|日|韩|新|深|美)).)*$"
  jp: &jp_filter "(?i)(?=.*(日|jp|japan))^((?!(港|台|韩|新|美)).)*$"
  kr: &kr_filter "(?i)(?=.*(kr|korea|kor|首尔|韩|韓))^((?!(台|日|新|深|美)).)*$"
  us: &us_filter "(?i)(?=.*(美|us|states|america))^((?!(港|台|日|韩|新)).)*$"
  sg: &sg_filter "(?i)(?=.*(广新|新加坡|sg|坡|狮城|🇸🇬|singapore))^((?!(港|台|日|韩|美|深)).)*$"

proxy-groups:
  - {name: 🚀 节点选择, type: select, proxies: [ ♻️ 自动选择, 🚀 手动切换, 🇭🇰 香港自动, 🇨🇳 台湾自动, 🇯🇵 日本自动, 🇰🇷 韩国自动, 🇺🇲 美国自动, 🇸🇬 新加坡自动, 直连]}
  - {name: 🚀 手动切换, type: select, include-all: true, filter: "^((?!(直连|拒绝)).)*$"}
  - {name: ♻️ 自动选择, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "^((?!(直连|拒绝)).)*$"}
  - {name: 📹 油管视频, <<: *pr}
  - {name: 🍀 Google, <<: *pr}
  - {name: 🤖 ChatGPT, <<: *pr}
  - {name: 👨🏿‍💻 GitHub, <<: *pr}
  - {name: 🐬 OneDrive, <<: *pr}
  - {name: 🪟 Microsoft, <<: *pr}
  - {name: 🎵 TikTok, <<: *pr}
  - {name: 📲 电报消息, <<: *pr}
  - {name: 🎥 奈飞视频, <<: *pr}
  - {name: 🎮 Steam下载, <<: *pr}
  - {name: 🎮 Steam平台, <<: *pr}
  - {name: 🍎 Apple, type: select, proxies: [直连, 🚀 节点选择]}
  - {name: 🎯 直连, type: select, proxies: [直连, 🚀 节点选择]}
  - {name: 🛑 手动屏蔽, type: select, proxies: [ 拒绝, 直连]}
  - {name: 🐟 漏网之鱼, <<: *pr}
  # 故障转移节点组
  - {name: 🇭🇰 香港故转, type: fallback, proxies: [🇭🇰 香港手动, 🇭🇰 香港自动], tolerance: 20, interval: 300}
  - {name: 🇨🇳 台湾故转, type: fallback, proxies: [🇨🇳 台湾手动, 🇨🇳 台湾自动], tolerance: 20, interval: 300}
  - {name: 🇯🇵 日本故转, type: fallback, proxies: [🇯🇵 日本手动, 🇯🇵 日本自动], tolerance: 20, interval: 300}
  - {name: 🇰🇷 韩国故转, type: fallback, proxies: [🇰🇷 韩国手动, 🇰🇷 韩国自动], tolerance: 20, interval: 300}
  - {name: 🇺🇲 美国故转, type: fallback, proxies: [🇺🇲 美国手动, 🇺🇲 美国自动], tolerance: 20, interval: 300}
  - {name: 🇸🇬 新加坡故转, type: fallback, proxies: [🇸🇬 新加坡手动, 🇸🇬 新加坡自动], tolerance: 20, interval: 300}
  # 手动节点组
  - {name: 🇭🇰 香港手动, <<: *manual, filter: *hk_filter}
  - {name: 🇨🇳 台湾手动, <<: *manual, filter: *tw_filter}
  - {name: 🇯🇵 日本手动, <<: *manual, filter: *jp_filter}
  - {name: 🇰🇷 韩国手动, <<: *manual, filter: *kr_filter}
  - {name: 🇺🇲 美国手动, <<: *manual, filter: *us_filter}
  - {name: 🇸🇬 新加坡手动, <<: *manual, filter: *sg_filter}

  # 自动节点组
  - {name: 🇭🇰 香港自动, <<: *auto, filter: *hk_filter}
  - {name: 🇨🇳 台湾自动, <<: *auto, filter: *tw_filter}
  - {name: 🇯🇵 日本自动, <<: *auto, filter: *jp_filter}
  - {name: 🇰🇷 韩国自动, <<: *auto, filter: *kr_filter}
  - {name: 🇺🇲 美国自动, <<: *auto, filter: *us_filter}
  - {name: 🇸🇬 新加坡自动, <<: *auto, filter: *sg_filter}




# 规则匹配
# 此规则部分没有做防泄露处理，因为弊严重大于利！
rules:
  - RULE-SET,private_domain,直连
  - RULE-SET,zdy_jujue,🛑 手动屏蔽
  - RULE-SET,zdy_zidong,🚀 节点选择
  - RULE-SET,zdy_zilian,直连
  - RULE-SET,steam_cn_domain,🎮 Steam下载
  - RULE-SET,steam_domain,🎮 Steam平台
  - RULE-SET,apple_domain,🍎 Apple
  - RULE-SET,proxylite,🚀 节点选择
  - RULE-SET,ai,🤖 ChatGPT
  - RULE-SET,github_domain,👨🏿‍💻 GitHub
  - RULE-SET,youtube_domain,📹 油管视频
  - RULE-SET,google_domain,🍀 Google
  - RULE-SET,onedrive_domain,🐬 OneDrive
  - RULE-SET,microsoft_domain,🪟 Microsoft
  - RULE-SET,tiktok_domain,🎵 TikTok
  - RULE-SET,telegram_domain,📲 电报消息
  - RULE-SET,netflix_domain,🎥 奈飞视频
  - RULE-SET,gfw_domain,🚀 节点选择
  - RULE-SET,geolocation-!cn,🚀 节点选择
  - RULE-SET,cn_domain,🎯 直连
  - RULE-SET,google_ip,🍀 Google,no-resolve
  - RULE-SET,netflix_ip,🎥 奈飞视频,no-resolve
  - RULE-SET,telegram_ip,📲 电报消息,no-resolve
  - RULE-SET,cn_ip,🎯 直连
  - MATCH,🐟 漏网之鱼

# 规则集
rule-anchor:
  ip: &ip {type: http, interval: 86400, behavior: ipcidr, format: mrs}
  domain: &domain {type: http, interval: 86400, behavior: domain, format: mrs}
  class: &class {type: http, interval: 86400, behavior: classical, format: text}
rule-providers:
  private_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/private.mrs"}
  proxylite: { <<: *class, url: "https://raw.githubusercontent.com/qichiyuhub/rule/refs/heads/main/proxy.list"}
  zdy_jujue: { <<: *class, url: "https://raw.githubusercontent.com/graytoowolf/oplist/main/jujue.list"}
  zdy_zidong: { <<: *class, url: "https://raw.githubusercontent.com/graytoowolf/oplist/main/zidong.list"}
  zdy_zilian: { <<: *class, url: "https://raw.githubusercontent.com/graytoowolf/oplist/main/zilian.list"}
  ai: {  <<: *domain, url: "https://github.com/MetaCubeX/meta-rules-dat/raw/refs/heads/meta/geo/geosite/category-ai-!cn.mrs" }
  youtube_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/youtube.mrs"}
  google_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/google.mrs"}
  github_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/github.mrs"}
  telegram_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/telegram.mrs"}
  netflix_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/netflix.mrs"}
  onedrive_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/onedrive.mrs"}
  microsoft_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/microsoft.mrs"}
  steam_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/steam.mrs"}
  steam_cn_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/steam@cn.mrs"}
  apple_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/apple-cn.mrs"}
  tiktok_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/tiktok.mrs"}
  gfw_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/gfw.mrs"}
  geolocation-!cn: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/geolocation-!cn.mrs"}
  cn_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/cn.mrs"}

  cn_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/cn.mrs"}
  google_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/google.mrs"}
  telegram_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/telegram.mrs"}
  netflix_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/netflix.mrs"}